class Item:
    """
    Representasi barang untuk masalah knapsack.

    Attributes:
        name (str): Nama barang.
        weight (int): Berat barang.
        value (int): Nilai barang.
    """

    def __init__(self, name, weight, value):
        self.name = name
        self.weight = weight
        self.value = value

    def __str__(self):
        return f"Item(name={self.name}, weight={self.weight}, value={self.value})"


def knapsack_backtracking(items, capacity, remaining_capacity, current_value, current_items, best_solution):
    """
    Algoritma knapsack menggunakan pendekatan backtracking.

    Args:
        items (list): Daftar barang-barang yang dapat dibawa.
        capacity (int): Kapasitas tas petualangan.
        remaining_capacity (int): Sisa kapasitas yang dapat digunakan pada langkah rekursif.
        current_value (int): Nilai total pada langkah rekursif.
        current_items (list): List barang-barang pada langkah rekursif.
        best_solution (dict): Dictionary untuk menyimpan solusi terbaik.

    Returns:
        None (hasil disimpan di dalam best_solution).
    """
    if remaining_capacity < 0:
        return

    if current_value > best_solution['value']:
        best_solution['value'] = current_value
        best_solution['items'] = current_items.copy()

    for item in items:
        if item not in current_items and remaining_capacity >= item.weight:
            current_items.append(item)
            knapsack_backtracking(items, capacity, remaining_capacity - item.weight,
                                  current_value + item.value, current_items, best_solution)
            current_items.pop()



items = [
    Item('Pedang Ajaib', 5, 12),
    Item('Potion Kekekalan', 3, 8),
    Item('Kompas Magis', 1, 4),
    Item('Mantel Kehancuran', 6, 20),
    Item('Tongkat Cahaya', 2, 6),
]


capacity = 10


best_solution = {'value': 0, 'items': []}


knapsack_backtracking(items, capacity, capacity, 0, [], best_solution)


print(f"Total nilai yang dapat Anda peroleh: {best_solution['value']}")
